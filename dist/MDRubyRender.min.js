function escapeForRegex(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function emptyStringFilter(e){return e!==""}const kanjiRange="\\u4e00-\\u9faf",kanjiBlockRegex=new RegExp(`[${kanjiRange}]+`,"g"),nonKanjiBlockRegex=new RegExp(`[^${kanjiRange}]+`,"g"),kanaWithAnnotations="\\u3041-\\u3095\\u3099-\\u309c\\u3081-\\u30fa\\u30fc",furiganaSeperators=".\uFF0E\u3002\u30FB",seperatorRegex=new RegExp(`[${furiganaSeperators}]`,"g"),innerRegexString="(?:[^\\u0000-\\u007F]|\\w)+";let regexList=[],previousFuriganaForms="";function updateRegexList(e){previousFuriganaForms=e;let t=e.split("|");t.length===0&&(t=["[]:^:()"]),regexList=t.map(f=>{let c=f.split(":");c.length!==3&&(c=["[]","^","()"]);const i=c[0],n=c[1],s=c[2];return new RegExp(escapeForRegex(i[0])+"("+innerRegexString+")"+escapeForRegex(i[1])+escapeForRegex(n)+escapeForRegex(s[0])+"("+innerRegexString+")"+escapeForRegex(s[1]),"g")})}let autoRegexList=[],previousAutoBracketSets="";function updateAutoRegexList(e){previousAutoBracketSets=e,autoRegexList=e.split("|").map(t=>new RegExp(`(^|[^${kanjiRange}]|)([${kanjiRange}]+)([${kanaWithAnnotations}]*)`+escapeForRegex(t[0])+`((?:[^${escapeForRegex(t)}\\u0000-\\u007F]|\\w|[${furiganaSeperators}])+)`+escapeForRegex(t[1]),"g"))}let replacementTemplate="",replacementBrackets="";function updateReplacementTemplate(e){e.length!==2&&(e="\u3010\u3011"),replacementBrackets=e,replacementTemplate=`<ruby>$1<rp>${e[0]}</rp><rt style="line-height:1;font-size:10px;">$2</rt><rp>${e[1]}</rp></ruby>`}function addFurigana(e,t){return t.furiganaForms!==previousFuriganaForms&&updateRegexList(t.furiganaForms),t.furiganaFallbackBrackets!==replacementBrackets&&updateReplacementTemplate(t.furiganaFallbackBrackets),regexList.forEach(f=>{e=e.replace(f,(c,i,n,s,p)=>{if(c.indexOf("\\")===-1&&p[s-1]!=="\\"){if(!t.furiganaPatternMatching||i.search(kanjiBlockRegex)===-1||i[0].search(kanjiBlockRegex)===-1)return replacementTemplate.replace("$1",i).replace("$2",n);{let h=(" "+n).slice(1),o=i.split(kanjiBlockRegex).filter(emptyStringFilter),a=i.split(nonKanjiBlockRegex).filter(emptyStringFilter),l="",g=0;if(o.length===0)return replacementTemplate.replace("$1",i).replace("$2",n);if(o.forEach((r,u)=>{if(n===void 0){u<a.length&&(l+=a[u]),l+=r;return}let $=n.split(new RegExp(escapeForRegex(r)+"(.*)")).filter(emptyStringFilter);g=u,l+=replacementTemplate.replace("$1",a[u]).replace("$2",$[0]),l+=r,n=$[1]}),n!==void 0&&g+1<a.length)l+=replacementTemplate.replace("$1",a[g+1]).replace("$2",n);else{if(n!==void 0)return replacementTemplate.replace("$1",i).replace("$2",h);g+1<a.length&&(l+=a[g+1])}return l}}else return c})}),t.furiganaStrictMode||(t.furiganaAutoBracketSets!==previousAutoBracketSets&&updateAutoRegexList(t.furiganaAutoBracketSets),autoRegexList.forEach(f=>{e=e.replace(f,(c,i,n,s,p,h,o)=>{if(c.indexOf("\\")===-1)if(t.furiganaPatternMatching){let a=[],l=p,g=(" "+s).slice(1);for(let r=p.length-1;r>=0;r--){if(s.length===0){l=p.substring(0,r+1);break}if(p[r]!==s.slice(-1)){l=p.substring(0,r+1);break}s=s.slice(0,-1)}if(furiganaSeperators.split("").reduce((r,u)=>r&&l.indexOf(u)===-1,!0))a=[replacementTemplate.replace("$1",n).replace("$2",l)];else{let r=l.split(seperatorRegex),u=n.split("");if(r.length===0||r.length>u.length)a=[replacementTemplate.replace("$1",n).replace("$2",l)];else{for(let d=0;d<r.length-1&&u.length!==0;d++)a.push(replacementTemplate.replace("$1",u.shift()).replace("$2",r[d]));let $=r.pop();a.push(replacementTemplate.replace("$1",u.join("")).replace("$2",$))}}return i+a.join("")+g}else return i+replacementTemplate.replace("$1",n).replace("$2",p)+s;else return c})})),e}function handleEscapedSpecialBrackets(e){return e.replace(/\\([【】])/g,"$1")}let MDRubyRender={};MDRubyRender.DEFAULT_OPTIONS={furigana:!0,furiganaForms:"[]:^:()|[]::{}",furiganaFallbackBrackets:"\u3010\u3011",furiganaStrictMode:!1,furiganaAutoBracketSets:"\u3010\u3011|{}",furiganaPatternMatching:!0},MDRubyRender.render=function(e,t){return handleEscapedSpecialBrackets(addFurigana(e,t||MDRubyRender.DEFAULT_OPTIONS))},MDRubyRender.registerMarked=function(e){e.text=function(t){return MDRubyRender.render(t)}},MDRubyRender.registerMarkit=function(e){e.markdownIt||(e.whiteList(["ruby","rt","rp"]),e.addPreProcessor(t=>this.render(t,e.getOptions())))},window.MDRubyRender=MDRubyRender,window.$docsify=window.$docsify||{},window.$docsify.plugins=(window.$docsify.plugins||[]).concat(function(e){e.beforeEach(function(t){return MDRubyRender.render(t)})});
